// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [Attribute]
            Decoders.addDecoder(clazz: [Attribute].self) { (source: AnyObject) -> [Attribute] in
                return Decoders.decode(clazz: [Attribute].self, source: source)
            }
            // Decoder for Attribute
            Decoders.addDecoder(clazz: Attribute.self) { (source: AnyObject) -> Attribute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Attribute()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.position = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["position"])
                instance.isSearchable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_searchable"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.options = Decoders.decodeOptional(clazz: AttributeOptions.self, source: sourceDictionary["options"])
                instance.i18n = Decoders.decodeOptional(clazz: I18n.self, source: sourceDictionary["i18n"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [AttributeOptions]
            Decoders.addDecoder(clazz: [AttributeOptions].self) { (source: AnyObject) -> [AttributeOptions] in
                return Decoders.decode(clazz: [AttributeOptions].self, source: source)
            }
            // Decoder for AttributeOptions
            Decoders.addDecoder(clazz: AttributeOptions.self) { (source: AnyObject) -> AttributeOptions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AttributeOptions()
                instance.data = Decoders.decodeOptional(clazz: Options.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [Brand]
            Decoders.addDecoder(clazz: [Brand].self) { (source: AnyObject) -> [Brand] in
                return Decoders.decode(clazz: [Brand].self, source: source)
            }
            // Decoder for Brand
            Decoders.addDecoder(clazz: Brand.self) { (source: AnyObject) -> Brand in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Brand()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.position = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["position"])
                instance.imageSmall = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_small"])
                instance.imageLarger = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_larger"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.visibility = Brand.[Visibility](rawValue: (sourceDictionary["visibility"] as? String) ?? "") 
                instance.i18n = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["i18n"])
                return instance
            }


            // Decoder for [Category]
            Decoders.addDecoder(clazz: [Category].self) { (source: AnyObject) -> [Category] in
                return Decoders.decode(clazz: [Category].self, source: source)
            }
            // Decoder for Category
            Decoders.addDecoder(clazz: Category.self) { (source: AnyObject) -> Category in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Category()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"])
                instance.imageSmall = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_small"])
                instance.imageLarger = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_larger"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.visibility = Category.[Visibility](rawValue: (sourceDictionary["visibility"] as? String) ?? "") 
                instance.i18n = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["i18n"])
                return instance
            }


            // Decoder for [Customer]
            Decoders.addDecoder(clazz: [Customer].self) { (source: AnyObject) -> [Customer] in
                return Decoders.decode(clazz: [Customer].self, source: source)
            }
            // Decoder for Customer
            Decoders.addDecoder(clazz: Customer.self) { (source: AnyObject) -> Customer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Customer()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.firstname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstname"])
                instance.lastname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastname"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.birhday = Decoders.decodeOptional(clazz: ISOFullDate.self, source: sourceDictionary["birhday"])
                instance.vat = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vat"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"])
                instance.receivedNewsletter = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["received_newsletter"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [DefaultResponse]
            Decoders.addDecoder(clazz: [DefaultResponse].self) { (source: AnyObject) -> [DefaultResponse] in
                return Decoders.decode(clazz: [DefaultResponse].self, source: source)
            }
            // Decoder for DefaultResponse
            Decoders.addDecoder(clazz: DefaultResponse.self) { (source: AnyObject) -> DefaultResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DefaultResponse()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [I18n]
            Decoders.addDecoder(clazz: [I18n].self) { (source: AnyObject) -> [I18n] in
                return Decoders.decode(clazz: [I18n].self, source: source)
            }
            // Decoder for I18n
            Decoders.addDecoder(clazz: I18n.self) { (source: AnyObject) -> I18n in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = I18n()
                instance.locale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locale"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [I18nProduct]
            Decoders.addDecoder(clazz: [I18nProduct].self) { (source: AnyObject) -> [I18nProduct] in
                return Decoders.decode(clazz: [I18nProduct].self, source: source)
            }
            // Decoder for I18nProduct
            Decoders.addDecoder(clazz: I18nProduct.self) { (source: AnyObject) -> I18nProduct in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = I18nProduct()
                instance.locale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locale"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.synopsis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["synopsis"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.characteristics = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["characteristics"])
                instance.seo = Decoders.decodeOptional(clazz: I18nProductSeo.self, source: sourceDictionary["seo"])
                return instance
            }


            // Decoder for [I18nProductSeo]
            Decoders.addDecoder(clazz: [I18nProductSeo].self) { (source: AnyObject) -> [I18nProductSeo] in
                return Decoders.decode(clazz: [I18nProductSeo].self, source: source)
            }
            // Decoder for I18nProductSeo
            Decoders.addDecoder(clazz: I18nProductSeo.self) { (source: AnyObject) -> I18nProductSeo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = I18nProductSeo()
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.keywords = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["keywords"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.meta = Decoders.decodeOptional(clazz: MetaPartialResponse.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2001]
            Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
                return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
            }
            // Decoder for InlineResponse2001
            Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2001Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2001Meta]
            Decoders.addDecoder(clazz: [InlineResponse2001Meta].self) { (source: AnyObject) -> [InlineResponse2001Meta] in
                return Decoders.decode(clazz: [InlineResponse2001Meta].self, source: source)
            }
            // Decoder for InlineResponse2001Meta
            Decoders.addDecoder(clazz: InlineResponse2001Meta.self) { (source: AnyObject) -> InlineResponse2001Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001Meta()
                instance.total = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["total"])
                return instance
            }


            // Decoder for [InlineResponse2002]
            Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
                return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
            }
            // Decoder for InlineResponse2002
            Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2001Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2003]
            Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
                return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
            }
            // Decoder for InlineResponse2003
            Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2003()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2001Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2004]
            Decoders.addDecoder(clazz: [InlineResponse2004].self) { (source: AnyObject) -> [InlineResponse2004] in
                return Decoders.decode(clazz: [InlineResponse2004].self, source: source)
            }
            // Decoder for InlineResponse2004
            Decoders.addDecoder(clazz: InlineResponse2004.self) { (source: AnyObject) -> InlineResponse2004 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2004()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2001Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse2005]
            Decoders.addDecoder(clazz: [InlineResponse2005].self) { (source: AnyObject) -> [InlineResponse2005] in
                return Decoders.decode(clazz: [InlineResponse2005].self, source: source)
            }
            // Decoder for InlineResponse2005
            Decoders.addDecoder(clazz: InlineResponse2005.self) { (source: AnyObject) -> InlineResponse2005 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2005()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [InlineResponse2006]
            Decoders.addDecoder(clazz: [InlineResponse2006].self) { (source: AnyObject) -> [InlineResponse2006] in
                return Decoders.decode(clazz: [InlineResponse2006].self, source: source)
            }
            // Decoder for InlineResponse2006
            Decoders.addDecoder(clazz: InlineResponse2006.self) { (source: AnyObject) -> InlineResponse2006 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2006()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.meta = Decoders.decodeOptional(clazz: InlineResponse2001Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [InlineResponse201]
            Decoders.addDecoder(clazz: [InlineResponse201].self) { (source: AnyObject) -> [InlineResponse201] in
                return Decoders.decode(clazz: [InlineResponse201].self, source: source)
            }
            // Decoder for InlineResponse201
            Decoders.addDecoder(clazz: InlineResponse201.self) { (source: AnyObject) -> InlineResponse201 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse201()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [InlineResponse2011]
            Decoders.addDecoder(clazz: [InlineResponse2011].self) { (source: AnyObject) -> [InlineResponse2011] in
                return Decoders.decode(clazz: [InlineResponse2011].self, source: source)
            }
            // Decoder for InlineResponse2011
            Decoders.addDecoder(clazz: InlineResponse2011.self) { (source: AnyObject) -> InlineResponse2011 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2011()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [InlineResponse2012]
            Decoders.addDecoder(clazz: [InlineResponse2012].self) { (source: AnyObject) -> [InlineResponse2012] in
                return Decoders.decode(clazz: [InlineResponse2012].self, source: source)
            }
            // Decoder for InlineResponse2012
            Decoders.addDecoder(clazz: InlineResponse2012.self) { (source: AnyObject) -> InlineResponse2012 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2012()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [InlineResponse2013]
            Decoders.addDecoder(clazz: [InlineResponse2013].self) { (source: AnyObject) -> [InlineResponse2013] in
                return Decoders.decode(clazz: [InlineResponse2013].self, source: source)
            }
            // Decoder for InlineResponse2013
            Decoders.addDecoder(clazz: InlineResponse2013.self) { (source: AnyObject) -> InlineResponse2013 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2013()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [InlineResponse2014]
            Decoders.addDecoder(clazz: [InlineResponse2014].self) { (source: AnyObject) -> [InlineResponse2014] in
                return Decoders.decode(clazz: [InlineResponse2014].self, source: source)
            }
            // Decoder for InlineResponse2014
            Decoders.addDecoder(clazz: InlineResponse2014.self) { (source: AnyObject) -> InlineResponse2014 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2014()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [MetaPartialResponse]
            Decoders.addDecoder(clazz: [MetaPartialResponse].self) { (source: AnyObject) -> [MetaPartialResponse] in
                return Decoders.decode(clazz: [MetaPartialResponse].self, source: source)
            }
            // Decoder for MetaPartialResponse
            Decoders.addDecoder(clazz: MetaPartialResponse.self) { (source: AnyObject) -> MetaPartialResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetaPartialResponse()
                instance.firstPageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_page_url"])
                instance.lastPageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_page_url"])
                instance.nextPageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_page_url"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.prevPageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prev_page_url"])
                return instance
            }


            // Decoder for [NotFoundResponse]
            Decoders.addDecoder(clazz: [NotFoundResponse].self) { (source: AnyObject) -> [NotFoundResponse] in
                return Decoders.decode(clazz: [NotFoundResponse].self, source: source)
            }
            // Decoder for NotFoundResponse
            Decoders.addDecoder(clazz: NotFoundResponse.self) { (source: AnyObject) -> NotFoundResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NotFoundResponse()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [Options]
            Decoders.addDecoder(clazz: [Options].self) { (source: AnyObject) -> [Options] in
                return Decoders.decode(clazz: [Options].self, source: source)
            }
            // Decoder for Options
            Decoders.addDecoder(clazz: Options.self) { (source: AnyObject) -> Options in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Options()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.position = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["position"])
                instance.auxCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aux_code"])
                instance.i18n = Decoders.decodeOptional(clazz: I18n.self, source: sourceDictionary["i18n"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [Order]
            Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject) -> [Order] in
                return Decoders.decode(clazz: [Order].self, source: source)
            }
            // Decoder for Order
            Decoders.addDecoder(clazz: Order.self) { (source: AnyObject) -> Order in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Order()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [Payment]
            Decoders.addDecoder(clazz: [Payment].self) { (source: AnyObject) -> [Payment] in
                return Decoders.decode(clazz: [Payment].self, source: source)
            }
            // Decoder for Payment
            Decoders.addDecoder(clazz: Payment.self) { (source: AnyObject) -> Payment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Payment()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [Product]
            Decoders.addDecoder(clazz: [Product].self) { (source: AnyObject) -> [Product] in
                return Decoders.decode(clazz: [Product].self, source: source)
            }
            // Decoder for Product
            Decoders.addDecoder(clazz: Product.self) { (source: AnyObject) -> Product in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Product()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.manual = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manual"])
                instance.urlVideo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url_video"])
                instance.visibility = Product.[Visibility](rawValue: (sourceDictionary["visibility"] as? String) ?? "") 
                instance.inHomepage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["in_homepage"])
                instance.isPrefered = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_prefered"])
                instance.isDigital = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_digital"])
                instance.urlDigital = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url_digital"])
                instance.isNew = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_new"])
                instance.i18n = Decoders.decodeOptional(clazz: I18nProduct.self, source: sourceDictionary["i18n"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.expiresAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expires_at"])
                return instance
            }


            // Decoder for [Shipping]
            Decoders.addDecoder(clazz: [Shipping].self) { (source: AnyObject) -> [Shipping] in
                return Decoders.decode(clazz: [Shipping].self, source: source)
            }
            // Decoder for Shipping
            Decoders.addDecoder(clazz: Shipping.self) { (source: AnyObject) -> Shipping in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Shipping()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [Tax]
            Decoders.addDecoder(clazz: [Tax].self) { (source: AnyObject) -> [Tax] in
                return Decoders.decode(clazz: [Tax].self, source: source)
            }
            // Decoder for Tax
            Decoders.addDecoder(clazz: Tax.self) { (source: AnyObject) -> Tax in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Tax()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.isDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_default"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
        }
    }
}
