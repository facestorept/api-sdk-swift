//
// TaxesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class TaxesAPI: APIBase {
    /**

     - parameter tax: (body) Tax to add to the store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addTaxes(tax tax: Tax, completion: ((data: InlineResponse2012?, error: ErrorType?) -> Void)) {
        addTaxesWithRequestBuilder(tax: tax).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /taxes
     - Creates a new tax in the store.
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  }, {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  } ]
}}]
     
     - parameter tax: (body) Tax to add to the store 

     - returns: RequestBuilder<InlineResponse2012> 
     */
    public class func addTaxesWithRequestBuilder(tax tax: Tax) -> RequestBuilder<InlineResponse2012> {
        let path = "/taxes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = tax.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2012>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of tax to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTaxById(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteTaxByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /taxes/{id}/
     - deletes a single tax based on the ID supplied
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     
     - parameter id: (path) ID of tax to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteTaxByIdWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/taxes/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of tax to fetch 
     - parameter limit: (query) max records to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTaxById(id id: Int64, limit: Int32? = nil, completion: ((data: InlineResponse2012?, error: ErrorType?) -> Void)) {
        getTaxByIdWithRequestBuilder(id: id, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /taxes/{id}/
     - Returns a tax based on a single ID
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  }, {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  } ]
}}]
     
     - parameter id: (path) ID of tax to fetch 
     - parameter limit: (query) max records to return (optional)

     - returns: RequestBuilder<InlineResponse2012> 
     */
    public class func getTaxByIdWithRequestBuilder(id id: Int64, limit: Int32? = nil) -> RequestBuilder<InlineResponse2012> {
        var path = "/taxes/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2012>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter includes: (query) Include associated objects within response (optional)
     - parameter limit: (query) max records to return (optional)
     - parameter orderBy: (query) Specify the field to be sorted, examples:  - &#x60;?order_by&#x3D;id|desc&#x60; - &#x60;?order_by&#x3D;updated_at|desc,position|asc&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTaxes(includes includes: [String]? = nil, limit: Int32? = nil, orderBy: [String]? = nil, completion: ((data: InlineResponse2002?, error: ErrorType?) -> Void)) {
        getTaxesWithRequestBuilder(includes: includes, limit: limit, orderBy: orderBy).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /taxes
     - Returns all taxes from the system that the user has access to
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  }, {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  } ],
  "meta" : {
    "total" : "total"
  }
}}]
     
     - parameter includes: (query) Include associated objects within response (optional)
     - parameter limit: (query) max records to return (optional)
     - parameter orderBy: (query) Specify the field to be sorted, examples:  - &#x60;?order_by&#x3D;id|desc&#x60; - &#x60;?order_by&#x3D;updated_at|desc,position|asc&#x60;  (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    public class func getTaxesWithRequestBuilder(includes includes: [String]? = nil, limit: Int32? = nil, orderBy: [String]? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/taxes"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "includes": includes,
            "limit": limit?.encodeToJSON(),
            "order_by": orderBy
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path) ID of tax to update 
     - parameter tax: (body) Tax to add to the store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTaxById(id id: Int64, tax: Tax, completion: ((data: InlineResponse2012?, error: ErrorType?) -> Void)) {
        updateTaxByIdWithRequestBuilder(id: id, tax: tax).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /taxes/{id}/
     - update a single tax based on the ID supplied
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  }, {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  } ]
}}]
     
     - parameter id: (path) ID of tax to update 
     - parameter tax: (body) Tax to add to the store 

     - returns: RequestBuilder<InlineResponse2012> 
     */
    public class func updateTaxByIdWithRequestBuilder(id id: Int64, tax: Tax) -> RequestBuilder<InlineResponse2012> {
        var path = "/taxes/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = tax.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2012>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of tax to update 
     - parameter tax: (body) Tax to add to the store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTaxById_0(id id: Int64, tax: Tax, completion: ((data: InlineResponse2012?, error: ErrorType?) -> Void)) {
        updateTaxById_0WithRequestBuilder(id: id, tax: tax).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PATCH /taxes/{id}/
     - update a single tax based on the ID supplied
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  }, {
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "name" : "Normal",
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 1,
    "is_default" : true
  } ]
}}]
     
     - parameter id: (path) ID of tax to update 
     - parameter tax: (body) Tax to add to the store 

     - returns: RequestBuilder<InlineResponse2012> 
     */
    public class func updateTaxById_0WithRequestBuilder(id id: Int64, tax: Tax) -> RequestBuilder<InlineResponse2012> {
        var path = "/taxes/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = tax.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2012>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
