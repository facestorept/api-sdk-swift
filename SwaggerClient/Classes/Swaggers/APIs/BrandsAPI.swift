//
// BrandsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BrandsAPI: APIBase {
    /**

     - parameter brand: (body) Brand to add to the store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBrands(brand brand: Brand, completion: ((data: InlineResponse201?, error: ErrorType?) -> Void)) {
        addBrandsWithRequestBuilder(brand: brand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /brands
     - Creates a new brand in the store.
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "image_small" : "image_small",
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "visibility" : [ "facebook", "facebook" ],
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 0,
    "position" : 1,
    "image_larger" : "image_larger",
    "i18n" : [ {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    }, {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    } ]
  }, {
    "image_small" : "image_small",
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "visibility" : [ "facebook", "facebook" ],
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 0,
    "position" : 1,
    "image_larger" : "image_larger",
    "i18n" : [ {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    }, {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    } ]
  } ]
}}]
     
     - parameter brand: (body) Brand to add to the store 

     - returns: RequestBuilder<InlineResponse201> 
     */
    public class func addBrandsWithRequestBuilder(brand brand: Brand) -> RequestBuilder<InlineResponse201> {
        let path = "/brands"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = brand.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse201>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of brand to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBrandById(id id: Int64, completion: ((error: ErrorType?) -> Void)) {
        deleteBrandByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /brands/{id}/
     - Deletes a single brand based on the ID supplied
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     
     - parameter id: (path) ID of brand to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBrandByIdWithRequestBuilder(id id: Int64) -> RequestBuilder<Void> {
        var path = "/brands/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of brand to fetch 
     - parameter includes: (query) Include associated objects within response (optional)
     - parameter limit: (query) max records to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBrandById(id id: Int64, includes: [String]? = nil, limit: Int32? = nil, completion: ((data: InlineResponse201?, error: ErrorType?) -> Void)) {
        getBrandByIdWithRequestBuilder(id: id, includes: includes, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /brands/{id}/
     - Returns a brand based on a single ID  ### Includes You can give the following values on includea parameter: `routes, products` 
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "image_small" : "image_small",
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "visibility" : [ "facebook", "facebook" ],
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 0,
    "position" : 1,
    "image_larger" : "image_larger",
    "i18n" : [ {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    }, {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    } ]
  }, {
    "image_small" : "image_small",
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "visibility" : [ "facebook", "facebook" ],
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 0,
    "position" : 1,
    "image_larger" : "image_larger",
    "i18n" : [ {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    }, {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    } ]
  } ]
}}]
     
     - parameter id: (path) ID of brand to fetch 
     - parameter includes: (query) Include associated objects within response (optional)
     - parameter limit: (query) max records to return (optional)

     - returns: RequestBuilder<InlineResponse201> 
     */
    public class func getBrandByIdWithRequestBuilder(id id: Int64, includes: [String]? = nil, limit: Int32? = nil) -> RequestBuilder<InlineResponse201> {
        var path = "/brands/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "includes": includes,
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse201>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter includes: (query) Include associated objects within response (optional)
     - parameter limit: (query) max records to return (optional)
     - parameter orderBy: (query) Specify the field to be sorted, examples:  - &#x60;?order_by&#x3D;id|desc&#x60; - &#x60;?order_by&#x3D;updated_at|desc,position|asc&#x60;  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBrands(includes includes: [String]? = nil, limit: Int32? = nil, orderBy: [String]? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        getBrandsWithRequestBuilder(includes: includes, limit: limit, orderBy: orderBy).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /brands
     - Returns all brands from the system that the user has access to  ### Includes You can give the following values on includes parameter: `routes, products` 
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "image_small" : "image_small",
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "visibility" : [ "facebook", "facebook" ],
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 0,
    "position" : 1,
    "image_larger" : "image_larger",
    "i18n" : [ {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    }, {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    } ]
  }, {
    "image_small" : "image_small",
    "updated_at" : "2000-01-23T04:56:07.000+00:00",
    "visibility" : [ "facebook", "facebook" ],
    "active" : true,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "id" : 0,
    "position" : 1,
    "image_larger" : "image_larger",
    "i18n" : [ {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    }, {
      "name" : "name",
      "description" : "description",
      "locale" : "pt_PT"
    } ]
  } ],
  "meta" : {
    "first_page_url" : "http://api.facestore.pt/v1/categories?order_by=id%2Cdesc&page=1",
    "path" : "http://api.facestore.pt/v1/categories",
    "last_page_url" : "http://api.facestore.pt/v1/categories?order_by=id%2Cdesc&page=4",
    "next_page_url" : "http://api.facestore.pt/v1/categories?order_by=id%2Cdesc&page=2",
    "prev_page_url" : "null"
  }
}}]
     
     - parameter includes: (query) Include associated objects within response (optional)
     - parameter limit: (query) max records to return (optional)
     - parameter orderBy: (query) Specify the field to be sorted, examples:  - &#x60;?order_by&#x3D;id|desc&#x60; - &#x60;?order_by&#x3D;updated_at|desc,position|asc&#x60;  (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func getBrandsWithRequestBuilder(includes includes: [String]? = nil, limit: Int32? = nil, orderBy: [String]? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/brands"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "includes": includes,
            "limit": limit?.encodeToJSON(),
            "order_by": orderBy
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path) ID of brand to update 
     - parameter brand: (body) Brand to update in store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCategoryById(id id: Int64, brand: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        updateCategoryByIdWithRequestBuilder(id: id, brand: brand).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - PUT /brands/{id}/
     - Update a single brand based on the ID supplied
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     
     - parameter id: (path) ID of brand to update 
     - parameter brand: (body) Brand to update in store 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCategoryByIdWithRequestBuilder(id id: Int64, brand: AnyObject) -> RequestBuilder<Void> {
        var path = "/brands/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = brand.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) ID of brand to update 
     - parameter brand: (body) Brand to update in store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCategoryById_0(id id: Int64, brand: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        updateCategoryById_0WithRequestBuilder(id: id, brand: brand).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - PATCH /brands/{id}/
     - Update a single brand based on the ID supplied
     - API Key:
       - type: apiKey APIToken 
       - name: APIKeyHeader
     
     - parameter id: (path) ID of brand to update 
     - parameter brand: (body) Brand to update in store 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCategoryById_0WithRequestBuilder(id id: Int64, brand: AnyObject) -> RequestBuilder<Void> {
        var path = "/brands/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = brand.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
